=== test_basic
--- main.n
import co
import runtime

fn main():void! {
    // case 1
    var ch = chan_new<int>()

    go (fn():void!{
        co.sleep(1000)
        int v = ch.recv()
        // assert(v == -233)
        println('[ch] sub co recv success, value =', v)
    })()

    var disturb = fn() {
        for true {
            co.sleep(100)
        }
    }
    go disturb()
    go disturb()

    ch.send(-233)
    println('[ch] send successful')


    // case 2
    var ch_str = chan_new<string>()
    go (fn(chan<string> ch):void!{
        co.sleep(1000)
        ch_str.send('hello channel')
    })(ch_str)

    println('[ch_str] wait recv')
    var str = ch_str.recv()
    println('[ch_str] recv successful', str)
    assert(str == 'hello channel')

    // case 3
    var ch_queue = chan_new<f64>()
    f64 sum = 0

   var consumer1 = fn():void! {
        println('[ch_queue] consumer1 start, p_index =', runtime.processor_index())

        for int i = 0; i < 100; i+=1 {
          var msg = ch_queue.recv()
          println('[ch_queue] consumer1 recv float msg =', i, msg)
          co.sleep(10) // 模拟消息处理的时间
          sum += msg
        }
    }

    var consumer2 = fn():void! {
        println('[ch_queue] consumer2 start, p_index =', runtime.processor_index())

        for int i = 0; i < 100; i+=1 {
          var msg = ch_queue.recv()
          println('[ch_queue] consumer2 recv float msg =', i, msg)
          co.sleep(10) // 模拟消息处理的时间
          sum -= msg
        }
    }

    go consumer1()
    go consumer2()

    co.sleep(100) // 等待 consumer 就绪

    println('[ch_queue] will send, p_index=', runtime.processor_index())
    // 生成 10 个 send
    for int i = 0; i < 50; i+=1 {
        ch_queue.send(i as f64)
    }

    co.sleep(1000)
    println('[ch_queue] send end, sum is', sum)
    assert(sum > -500 && sum < 500)
}

=== test_chan_done[repeat=5]
--- main.n
import co
import time

fn main():void! {
    i64 start = time.unix()
    int count = 100
    var done = chan_new<bool>()
    var mockfn = fn(int id):void! {
        co.sleep(1000)
        // println(id, 'coroutine end')

        done.send(true)
    }
    for int i = 0; i < count; i+=1 {
        go mockfn(i)
    }

    for int i = 0; i < count; i+=1 {
        done.recv()
    }

    assert(time.unix() - start < 2)
    println('done, use time: ', time.unix() - start)
}

=== test_chan_done2[repeat=5]
--- main.n
import co
import time

fn main():void! {
    i64 start = time.unix()
    int count = 100
    var done = chan_new<bool>()
    var ids = set_new<int>()

    for int i = 0; i < count; i+=1 {
        go fn(int id):void! {
            co.sleep(1000)
            // set 不是线程安全的，所以 add 可能会失败
            ids.add(id)
            // println(id, 'coroutine end', succ)

            done.send(true)
        }(i)
    }

    for int i = 0; i < count; i+=1 {
        done.recv()
    }

    assert(time.unix() - start == 1)
    println('done, use time: ', time.unix() - start)
}

=== test_chan_done3[repeat=5]
--- main.n
import co
import time

fn main():void! {
    i64 start = time.unix()
    int count = 100
    var done = chan_new<bool>()
    var ids = set_new<int>()
    ids.add(100)

    for int i = 0; i < count; i+=1 {
        go fn():void! {
            co.sleep(1000)
            ids.add(i)
            // println(i, 'coroutine end', succ)

            done.send(true)
        }()
    }

    for int i = 0; i < count; i+=1 {
        done.recv()
    }

    var end = time.unix()
    println('done, use time: ', end - start)
    assert(end - start <= 1)
}